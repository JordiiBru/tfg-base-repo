name: Apply
on:
  push:
    branches:
    - 'main'

permissions:
  id-token: write
  contents: read  

env:
  TF_VERSION: '1.5.7'
  TG_VERSION: 'v0.58.2'

jobs:
  terraform-apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check out base ref
        run: |
          git fetch --no-tags --depth=2 origin main

      - name: Get working directory
        run: |
          CODE_DIR=$(git --no-pager diff --diff-filter=d --raw --name-only origin/main origin/main~1 | egrep -E "\.tf\$|^\/dev|^\/staging|^\/prod" | grep ".*\/" -o | uniq)
          echo "WORKING_DIR=$CODE_DIR" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::522922866161:role/tfg-repo-base-cicd

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: $TF_VERSION

      - name: Verify Terraform version
        run: terraform --version
      
      - name: Setup Terragrunt
        run: |
          curl -s -qL -o terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /bin
      
      - name: Verify Terragrunt version
        run: terragrunt --version

      - name: Terragrunt init
        id: init
        run: terragrunt init -input=false -reconfigure --terragrunt-working-dir ${{ env.WORKING_DIR }}
      
      - name: Terragrunt plan
        id: plan
        run: terragrunt plan --terragrunt-working-dir ${{ env.WORKING_DIR }} -out workspace.plan

      - name: Terraform apply
        id: apply
        run: terragrunt apply -auto-approve -input=false --terragrunt-working-dir ${{ env.WORKING_DIR }} -no-color
        continue-on-error: true

      - name: Post Apply comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Apply')
            })

            const output = `#### Terraform Apply ðŸ“˜\`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`

            </details>
  
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\` in Path: \`${{ env.WORKING_DIR }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply Status
        if: steps.validate.outcome == 'failure'
        run: exit 1