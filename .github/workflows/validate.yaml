name: Validate
on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  id-token: write
  contents: read  
  pull-requests: write

env:
  TF_VERSION: '1.5.7'
  TG_VERSION: 'v0.58.2'

jobs:
  terraform-validate:
    name: Terraform validate
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check out base ref
        run: |
          git fetch --no-tags --depth=1 origin $GITHUB_BASE_REF
          git fetch --no-tags --depth=1 origin $GITHUB_HEAD_REF
          echo $GITHUB_BASE_REF
          echo $GITHUB_HEAD_REF

      - name: Get working directory
        run: |
          CODE_DIR=$(git --no-pager diff --diff-filter=d --raw --name-only origin/$GITHUB_BASE_REF origin/$GITHUB_HEAD_REF | egrep -E "\.tf\$|^\/dev|^\/staging|^\/prod" | grep ".*\/" -o | uniq)
          echo "WORKING_DIR=$CODE_DIR" >> $GITHUB_ENV
      
      - name: Verify awscli version
        run: aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::522922866161:role/tfg-repo-base-cicd

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: $TF_VERSION

      - name: Verify Terraform version
        run: terraform --version

      - name: Setup Terragrunt
        run: |
          curl -s -qL -o terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /bin
      
      - name: Verify Terragrunt version
        run: terragrunt --version

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: tflint
      #   uses: reviewdog/action-tflint@v1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     working_directory: ${{ env.WORKING_DIR }}
      #     reporter: github-pr-check
      #     fail_on_error: "false"
      #     filter_mode: "file"
      #     tflint_version: "v0.51.0"
      #     tflint_init: "true"


      - name: Terragrunt Format
        id: fmt
        run: |
          terragrunt fmt -check -recursive --terragrunt-working-dir ${{ env.WORKING_DIR }} -diff
        continue-on-error: false

      - name: Terragrunt Validate
        id: validate
        run: |
          cd ${{ env.WORKING_DIR }}
          validate_tflint=$(terragrunt validate -no-color)
          echo "$validate_tflint"
        continue-on-error: true
      
      - name: Post Validate comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Validate')
            })

            const output = `#### Terraform Validate ðŸ“–\`${{ steps.validate.outcome }}\`
            <details><summary>Show Validate</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.validate_tflint }}
            \`\`\`

            </details>
  
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\` in Path: \`${{ env.WORKING_DIR }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Validate Status
        if: steps.validate.outcome == 'failure'
        run: exit 1

  TFSec:
    name: TFSec
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check out base ref
        run: |
          git fetch --no-tags --depth=1 origin $GITHUB_BASE_REF
          git fetch --no-tags --depth=1 origin $GITHUB_HEAD_REF
          echo $GITHUB_BASE_REF
          echo $GITHUB_HEAD_REF

      - name: Get working directory
        run: |
          CODE_DIR=$(git --no-pager diff --diff-filter=d --raw --name-only origin/$GITHUB_BASE_REF origin/$GITHUB_HEAD_REF | egrep -E "\.tf\$|^\/dev|^\/staging|^\/prod" | grep ".*\/" -o | uniq)
          echo "WORKING_DIR=$CODE_DIR" >> $GITHUB_ENV

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          tfsec_args: --tfvars-file ${{ env.WORKING_DIR }}terraform.tfvars -m CRITICAL
          soft_fail_commenter: true
          working_directory: ''
          github_token: ${{ secrets.GITHUB_TOKEN }}